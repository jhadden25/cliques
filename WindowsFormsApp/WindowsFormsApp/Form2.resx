<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICoAAAEAGACQEAAAFgAAACgAAAAgAAAAVAAAAAEAGAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAABhLACXl5ctfvkufvkufvgtfvgtfvktfvgtfvkrd/Urd/Urd/Urd/Urd/Urd/Urd/Urd/Yrd/Up
        cPIpcPIocPIocPIpcPIocPIpcfIocfIocfImau8mau8mae4mae5hLACXlpd5inhLIQAkY+skY+skY+sj
        Y+skY+sjY+shXeghXeghXOghXOgiXeghXeghXOghXeghXegfVuQ4V+GWYLLBZnPSaT/UaSvGZ2ahYaZA
        V98dUOIcT+IcT+IdT+GWlpZ4iniinpc1fC9LIQAaSd4aSd4bSN4aSd4aSN4XQNoXQNoXP9oXQNoXQNoX
        P9oXQNkXQNkXQNoXQNllQ8HXagDXagDXagDXagDXagDXagDLZk9aQMcPKtAPKs8PK88PKs9LIQA1ezAg
        dxkihTBLIQAMIMoMIMoLIMoMIcoMIMoIFsUIFcUIFsQIFsQIFcUIFcUIFsQIFsUHFsRkMK7XagDXagDX
        agDXagDXagDXagDXagDFYVYcBbkAAboAAboAAboAAbpLIQAihTAol04uqGxLIQAAALEAALIAALIAALIA
        AKkAAKkAAKkAAKkAAKkAAKkAAKkAAKkAAKljLpLXagDXagDXagDXagDXagDXagDXagDXagB1NYQAAJgA
        AJgAAJgAAJgAAI9LIQAuqGw0uYqP1tNLIQAAAI8AAI8AAI8AAIYAAIYAAIYAAIYAAYcAAIYAAIYAAIYA
        AIdhLXq3Wkd4Omw6GHlNIHfDXzrXagDXagDXagCRRWEAAHUAAHUAAHUAAHUAAGwAAGxLIQCxwrzOsaj6
        mIpLIQAAAGwAAGwAAGwAAGMAAGMAAGMAAGQAAGQAAGMAAGMAAGQAAGMAAFwAAF0AAFwNAV25WzHXagDX
        agDXagCKQUoAAFoAAFoAAFoAAFoAAFkAAFgAAFdLIQD7mIrjdGTKWEVLIQAAAFcAAFcAAFUAAFUAAFUA
        AFUAAFQAAFQAAFUAAFQAAFQAAFIAAFIyFFCyVy/XagDXagDXagDVaQRNIk0AAE8AAFAAAFAAAFAAAE8A
        AE0AAE0AAE1LIQDKWEXIVUPFUT9LIQAAAE0AAEsAAEoAAEoAAEsAAEsAAEsAAEsAAEoAAEsAAEhWJ0LG
        YhrXagDXagDXagDXagCiTjEAAEcAAEgAAEUAAEYAAEUAAEYAAEIAAEIAAEIAAEJLIQDFUT7CTju+SjdL
        IQAAAEIAAEAAAEAAAEAAAEAAAEAAAEAAAEAAAEBeLDrPZg3XagDXagDXagDXagCxViMWBj0AAD4AAD0A
        ADsAADsAADsAADsAADsAADgAADgAADgAADhLIQC/Sje8RzO6RDBLIQAAADYAADYAADYAADYAADYAADYA
        ADYrEDXLYw7XagDXagDXagDXagCoUiAcBDMAADMAADQAADMAADEAADEAADEAADEAADEAAC4AAC4AAC4A
        AC4AAC5LIQC5Qy+2QS20PihLIQAAACsAACsAACsAACwAACsAACyURx/XagDXagDXagDVaQGMRB8AACkA
        ACkAACkAACkAACkAACkAACcAACYAACcAACcAACQAACMAACQAACQAACQAACNLIQCzPSmwOiWtNiFLIQAA
        ACIAASIAACEAACEAACG4Wg7XagDXagDXagCKQRcAAB8AAB8AAB4AAB8AAB8AAB8AAB4AABwAAB0AAB0A
        ABwAABwAABkAABoAABkAABkAABoAABpLIQCuNiGrMx2oMBpLIQAAABcAABcAABcAABfDXwbXagDXagDX
        agB+OxAqDRRkLRKpUQqDPg8AARUAABUBABQAABIAABIAABJjLA+3WgbQZwHTaAG9WwRyNAwAAA8AABAA
        AA9LIQCpMBqlLBeiKRNLIQAAAA0AAA0AAA2zWATXagDXagDXagDXagDXagDXagDXagCIQAYAAAoAAAsA
        AAoAAAgAAAgAAAecTATXagDXagDXagDXagDVaQB9OwQAAAUAAAUAAAVLIQCiKROfJQ+bIgtLIQAAAAMA
        AAN8OwLXagDXagDXagDXagDXagDXagDXagCIQAAAAAAAAAAAAAAAAAMAAAIAAAOcTALXagDXagDXagDX
        agDXagDOZQAmDQUAAAUAAAUAAAVLIQCcIgyaHwiXHAVLIQAAAAgAAAeoUQPXagDXagDXagDXagDXagDX
        agCIQAcAAAsAAQoAAAsAAA0AAA0AAA2cTAfXagDXagDXagDXagDXagDXagB6OQwAABAAAA8AABAAAA9L
        IQCWHAWaHwmdIgxLIQAAABIAABKEPw2/XQXSZwHTaAHGYQSjTwtLIRMAABUAABQAABUAABcAABcAABeO
        RBB9OxI9Fxa8XQnXagDXagDXagCUSBEAABoAABkAABoAABkAABxLIQCdIwygJhCiKRNLIQAAABwAABwA
        ABwAAB0AAB8AAB8AAB8AAB8AAB4AAR8AAB8AACEAACEAACIAACEAACEAACGORBnXagDXagDXagCcSxgA
        ACQAACQAACQAACQBACQAACZLIQCiKBOlLBaoMBtLIQAAACYAACcAACYAACkAACkAACkAACkAACkAACkA
        ACkAACsAACwAACwAACwAACsAACuIQCLXagDXagDXagCcTCAAAC4AAC4AAC4AAC4AAC4AADAAADFLIQCo
        MBusNB6vOCJLIQAAADEAADEAADMAADQAADMAADQAADMAADMAADQAADYAADYAADYAADYAADUAADaIQCrX
        agDXagDXagCcTCgAADgAADgAADgAADkAADkAADsAADsAADtLIQCuNyOxOiWzPSlLIQAAADsAADsAAD0A
        AD0AAD0AAD0AAD4AAD0AAEAAAEAAAEAAAEEAAEAAAEGIQDPXagDXagDXagCcTC8AAEMAAEIAAEIAAEMA
        AEMAAEMAAEUAAEUAAEVLIQCzPSi3QS25RTFLIQAAAEUAAUgAAEcAAEgAAEgAAEgAAEcAAEoAAEoAAEoA
        AEoAAEoAAEqIQDvXagDXagDXagCcTDcAAE0AAE0AAE0AAE0AAE0AAE0AAE8AAFAAAE8AAE9LIQC6RTG8
        SDS/SjZLIQAAAFIAAFIAAFIAAFIAAFIAAFIAAFUAAFQAAFQAAFQAAFQAAFSIQETXagDXagDXagCcTD8A
        AFcAAFcAAFcAAFcAAFcAAFcAAFoAAFkAAFkAAFoAAFpLIQDATDjCTjrFUj5LIQAAAF0AAFwAAFwAAFwA
        AFwAAGQAAGQAAGQAAGQAAGQAAGSIQFHXagDXagDXagCcTE4AAGwAAGwAAGwAAGwAAGwAAGwAAGwAAHUA
        AHUAAHUAAHUAAHVLIQDFUj/IVkPOXEpLIQAAAH0AAH0AAH0AAH0AAIYAAIYAAIYAAIYAAIcAAIaIQG3X
        agDXagDXagCcTGkAAI8AAI8AAI8AAI8AAI8AAI8AAI8AAJgAAJgAAJgAAJgAAJgAAJdLIQDOXEnidWP7
        mIpLIQAAAKAAAKAAAKEAAKkAAKkAAKkAAKkAAKkAAKmIQIrXagDXagDXagCcTIMAALEAALIAALEAALIA
        AbIAALIAALIAAboAALoAALoAALsAALoAAboAALpLIQD7mIrOsaiO19JLIQAEC78EC78HFcUIFcUHFsQI
        FsQHFsUIFcWJQ6HXagDXagDXagCdT5YLIMkMIMoMIMoLIMoMIMoMIMoLIMoMIcoPK9APK88PK88QK88P
        K88PKs8PK89LIQCO19Iys4AuqGxLIQATNtQUNdUXP9oXQNoXQNoXQNkXP9mKUrPXagDXagDXagCdW6Ua
        Sd4aSd4bSN4bSd4bSN4aSN4aSd4aSd4dT+EdT+EcT+EcT+IcT+EcUOEdT+EcT+FLIQAsomIolk5GHgAg
        dhkfVuUhXeghXOgiXeghXeghXOiLYr7XagDXagDXagCeZ68jY+skY+skY+sjZOskY+skY+skY+wjZOsm
        au8nau8mau8mau8mau8mau4mau4mae4mae8ol04ihTAgdxk/fjopcfIrd/UrePYrd/Yqd/UrePUrePUr
        d/Yrd/UrePUufvgtfvktfvgtfvgtfvgtfvgtfvgtfvgtffkufvkwhPwwhfwwhPwwhPwwhPwwhfwwhPwv
        hftUJQAgdxlAfTpghV0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAD//////////////////////////wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA////////////////////////
        //8=
</value>
  </data>
</root>